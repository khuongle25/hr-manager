from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware

from pydantic import BaseModel
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate
import os
from schema_registry import schema_registry
from intent_api_mapping import extract_intent_entities, call_api, get_role_from_token
from constants import DEPARTMENT_MAPPINGS, LEAVE_TYPE_MAPPINGS, ROLE_MAPPINGS, STATUS_MAPPINGS

# L·∫•y Gemini API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyAy1zLhUYfX-B_r71zENYncn18vJDp0V5k")

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ho·∫∑c ch·ªâ ƒë·ªãnh domain frontend, v√≠ d·ª•: ["http://localhost:3000"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Kh·ªüi t·∫°o LLM
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-pro",
    google_api_key=GEMINI_API_KEY
)

def get_current_year():
    """L·∫•y nƒÉm hi·ªán t·∫°i ƒë·ªÉ s·ª≠ d·ª•ng trong prompt"""
    from datetime import datetime
    return datetime.now().year

def generate_enhanced_prompt(message: str) -> str:
    """T·∫°o prompt chi ti·∫øt v·ªõi schema information"""
    current_year = get_current_year()
    
    # L·∫•y t·∫•t c·∫£ intents t·ª´ schema
    available_intents = list(schema_registry.endpoints.keys())
    
    # T·∫°o mapping info t·ª´ constants
    dept_info = ", ".join([f"{k}={v}" for k, v in list(DEPARTMENT_MAPPINGS.items())[:10]])
    leave_type_info = ", ".join([f"{k}={v}" for k, v in list(LEAVE_TYPE_MAPPINGS.items())[:8]])
    role_info = ", ".join([f"{k}={v}" for k, v in list(ROLE_MAPPINGS.items())[:6]])
    status_info = ", ".join([f"{k}={v}" for k, v in list(STATUS_MAPPINGS.items())[:8]])
    
    prompt = f"""
        B·∫°n l√† HR assistant AI. Nhi·ªám v·ª•: ph√¢n t√≠ch tin nh·∫Øn v√† tr√≠ch xu·∫•t intent + entities.

        INTENTS H·ª¢P L·ªÜ: {', '.join(available_intents)}

        MAPPING TH√îNG TIN:
        - Ph√≤ng ban: {dept_info}
        - Lo·∫°i ngh·ªâ ph√©p: {leave_type_info}
        - Vai tr√≤: {role_info}
        - Tr·∫°ng th√°i: {status_info}

        RULES:
        1. Lu√¥n tr·∫£ v·ªÅ JSON: {{"intent": "<intent>", "entities": <entities>}}
        2. S·ª≠ d·ª•ng nƒÉm {current_year} n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh nƒÉm
        3. Map ti·∫øng Vi·ªát sang English trong entities
        4. ‚≠ê QUAN TR·ªåNG: V·ªõi ngh·ªâ ph√©p, d√πng "leave_type_id" (integer) ch·ª© kh√¥ng ph·∫£i "leave_type"
        5. ‚≠ê ID SELECTION: Khi user nh·∫≠p "ID 123" ho·∫∑c "duy·ªát ƒë∆°n ID 123" ‚Üí extract leave_request_id: 123
        6. N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c, tr·∫£ v·ªÅ: {{"intent": "unknown", "entities": {{}}}}

        V√ç D·ª§:
        - "xin ngh·ªâ ·ªëm" ‚Üí {{"intent": "request_leave", "entities": {{"leave_type_id": 2, ...}}}}
        - "duy·ªát ƒë∆°n c·ªßa Nguy·ªÖn VƒÉn A" ‚Üí {{"intent": "approve_leave", "entities": {{"employee_name": "Nguy·ªÖn VƒÉn A"}}}}
        - "duy·ªát ƒë∆°n ID 123" ‚Üí {{"intent": "approve_leave", "entities": {{"leave_request_id": 123}}}}
        - "ID 123" ‚Üí {{"intent": "approve_leave", "entities": {{"leave_request_id": 123}}}}

        Message: "{message}"

        Tr·∫£ v·ªÅ JSON:
    """
    return prompt

# ƒê·ªãnh nghƒ©a prompt
prompt = ChatPromptTemplate.from_messages([
    ("system", "B·∫°n l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª±. H√£y x√°c ƒë·ªãnh √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng v√† tr√≠ch xu·∫•t th√¥ng tin c·∫ßn thi·∫øt."),
    ("human", "{input}")
])

chain = prompt | llm

class Message(BaseModel):
    user_id: int
    role: str
    message: str
    token: str  # Th√™m tr∆∞·ªùng token ƒë·ªÉ x√°c th·ª±c API backend

@app.post("/chat")
async def chat(msg: Message):
    # 1. T·∫°o enhanced prompt v·ªõi constants
    enhanced_prompt = generate_enhanced_prompt(msg.message)
    
    # 2. Ph√¢n t√≠ch intent v√† entity
    ai_result = extract_intent_entities(msg.message, chain=chain, enhanced_prompt=enhanced_prompt)
    intent = ai_result.get("intent")
    entities = ai_result.get("entities", {})

    # ‚≠ê 2.5. L·∫§Y ROLE T·ª™ DJANGO API THAY V√å TIN FRONTEND
    actual_user_role = get_role_from_token(msg.token)
    
    if not actual_user_role:
        return {
            "user_message": "‚ùå Kh√¥ng th·ªÉ x√°c th·ª±c user. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
            "intent": intent,
            "entities": entities,
            "result": {}
        }
    
    print(f"üî• DEBUG - Frontend role: {msg.role}, Actual role from API: {actual_user_role}")

    # 3. G·ªçi API backend th·ª±c thi intent, s·ª≠ d·ª•ng ACTUAL role t·ª´ Django
    api_result = call_api(intent, entities, user_token=msg.token, user_role=actual_user_role, user_message_input=msg.message)

    # 3. N·∫øu user_message r·ªóng, sinh c√¢u tr·∫£ l·ªùi cu·ªëi c√πng b·∫±ng Gemini
    user_message = api_result.get("user_message", "")
    result = api_result.get("result", {})
    if not user_message or user_message.strip() == "":
        # N·∫øu result l√† dict c√≥ 'results' l√† list, ch·ªâ truy·ªÅn ph·∫ßn results
        result_for_prompt = result
        if isinstance(result, dict) and 'results' in result and isinstance(result['results'], list):
            result_for_prompt = result['results']
        # Prompt m·∫°nh m·∫Ω, kh√¥ng v√≠ d·ª•
        prompt_text = f'''
            B·∫°n l√† tr·ª£ l√Ω nh√¢n s·ª± AI. D∆∞·ªõi ƒë√¢y l√† c√¢u h·ªèi g·ªëc c·ªßa ng∆∞·ªùi d√πng v√† K·∫æT QU·∫¢ API TR·∫¢ V·ªÄ D∆Ø·ªöI D·∫†NG JSON.
            - H√£y ƒë·ªçc k·ªπ k·∫øt qu·∫£ JSON, DI·ªÑN GI·∫¢I l·∫°i k·∫øt qu·∫£ n√†y cho ng∆∞·ªùi d√πng d·ª±a tr√™n c√¢u h·ªèi g·ªëc.
            - KH√îNG l·∫∑p l·∫°i c√¢u h·ªèi, KH√îNG tr·∫£ l·ªùi chung chung, ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu JSON.
            - N·∫øu l√† danh s√°ch, h√£y li·ªát k√™ t√™n, t·ªïng s·ªë, t·ªëi ƒëa 10 m·ª•c.
            - N·∫øu l√† th√¥ng tin c√° nh√¢n, h√£y tr√¨nh b√†y r√µ r√†ng, ng·∫Øn g·ªçn.
            - N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, h√£y n√≥i r√µ cho ng∆∞·ªùi d√πng bi·∫øt.
            - N·∫øu l√† l·ªói, h√£y gi·∫£i th√≠ch ng·∫Øn g·ªçn, th√¢n thi·ªán.
            - Tr·∫£ l·ªùi t·ª± nhi√™n, d·ªÖ hi·ªÉu, ƒë√∫ng ng·ªØ c·∫£nh.
            - N·∫øu kh√¥ng th·ªÉ tr·∫£ l·ªùi, h√£y n√≥i r√µ l√Ω do.

            C√¢u h·ªèi g·ªëc: {msg.message}
            K·∫øt qu·∫£ API (JSON): {result_for_prompt}
            Tr·∫£ l·ªùi:
        '''
        response = chain.invoke({"input": prompt_text})
        user_message = response.content.strip()
    # 4. Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho frontend
    return {
        "user_message": user_message,
        "intent": intent,
        "entities": entities,
        "result": result
    }